import streamlit as st
import streamlit.components.v1 as components
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
import matplotlib.pyplot as plt
from datetime import datetime
from PIL import Image


# Set Streamlit page configuration to a wide layout
st.set_page_config(layout="wide")

# Define a path for reading data
path = 'data/'
logo = Image.open(path+'FlowSmart_Logo.png')

# Logo and Title
col1_width = 1  # First column width
col2_width = 4  # Second column width
col1, col2 = st.columns([col1_width, col2_width])
col1.image(logo, width=100)
col2.write("<div style='text-align: left;'><h1>FlowSmart</h1></div>", unsafe_allow_html=True)

# Add a sidebar with radio button options
selected_option = st.sidebar.radio("What would you like to do?", ["Check Incidents", "Check Journey"])


# Function 1 - Traffic Incident Summary
if selected_option == "Check Incidents":
    st.title("Traffic Incidents Updates")

    # Summary generated by LLM
    summary = pd.read_csv(path+'incident_summary.csv').loc[0, 'summary']
    summary_footnote = "<sup>[Generated using Mixtral-8x7B Instruct model]</sup>"
    styled_summary = f"<div style='text-align: justify'>{summary + summary_footnote}</div>"
    st.markdown(styled_summary, unsafe_allow_html=True)

    # Plot map of traffic incidents
    traffic_incidents = pd.read_csv(path+'traffic_incidents.csv')
    #type_counts = traffic_incidents['Type'].value_counts().reset_index(name='Counts').rename(columns={'index': 'Type'}).set_index('Type')
    #st.dataframe(type_counts)
    
    # Generating a scatter mapbox plot using Plotly Express, with latitude and longitude as coordinates
    fig = px.scatter_mapbox(traffic_incidents, lat="Latitude", lon="Longitude", hover_name="Type", opacity=.8,
                            hover_data={"Time": True, "Detail": True, "Type": False, "Size": False, "Latitude": False, "Longitude": False},
                            color='Type', size='Size', zoom=10, height=400, width=800, size_max=8,
                            color_discrete_map={"Accident":"#FF0000",
                                                "Vehicle breakdown": "#FFFF00",
                                                "Roadwork": "#964B00",
                                                "Heavy Traffic": "#FFA500"})

    # Adjust figure
    fig.update_layout(mapbox_style="open-street-map")
    fig.update_layout(margin={"r":0,"t":0,"l":0,"b":0})
    fig.update_layout(legend=dict(font=dict(size=16)))

    # Displaying the plot
    st.plotly_chart(fig)

    # Question and Answer using RAG
    st.header('Ask questions about Singapore\'s traffic')

    question_options = ['Can you provide the location of the vehicle breakdown incidents', 
                        'Are there any roadwork incidents on Orchard Road?',
                        'I want to ask my own question']
    dropdown_options = [''] + question_options
    selected_option = st.selectbox('Choose a sample question, or indicate if you would like to ask your own question', dropdown_options)
    incidents_rag = pd.read_csv(path+'incidents_rag.csv')

    if selected_option in question_options:
        if selected_option == 'I want to ask my own question':
            question_input = st.text_input('Enter your own question','')
            if question_input:
                question = question_input
                footnote = "<sup>[Generated using Mixtral-8x7B Instruct model]</sup>"
                styled_response = f"<div style='text-align: justify'>{'Response'}{footnote}</div>"
                st.markdown(styled_response, unsafe_allow_html=True)
                st.write(f"{incidents_rag.loc[incidents_rag['question'] == question, 'response'].values[0]}")
        else:
            question = selected_option
            footnote = "<sup>[Generated using Mixtral-8x7B Instruct model]</sup>"
            styled_response = f"<div style='text-align: justify'>{'Response: '}{footnote}</div>"
            st.markdown(styled_response, unsafe_allow_html=True)
            st.write(f"{incidents_rag.loc[incidents_rag['question'] == question, 'response'].values[0]}")
        

# Function 2 - Get Journey Information
elif selected_option == "Check Journey":
    st.title("Journey Information")
    st.write('Enter your start and end location to retrieve a travel route with details such as traffic incidents, distance, duration, costs and parking spaces.')
    st.markdown("<br>", unsafe_allow_html=True)

    # Text input by user for start and end location
    col1, col2 = st.columns(2)
    start_location = col1.text_input('Where are you now?', '')
    end_location = col2.text_input('Where are you going?', '')
    st.markdown("<br>", unsafe_allow_html=True)


    # Get the current time
    current_time = datetime.now().strftime('%I:%M %p')
    current_time = "09:00 AM" # for sample
    
    # Display summary of the journey
    if start_location and end_location:
        routing = pd.read_csv(path+'routing.csv')
        interested_incidents = pd.read_csv(path+'interested_incidents.csv')
        interested_erp = pd.read_csv(path+'interested_erp.csv')
        start_latlong = [routing.loc[routing['Node'] == 0, 'lat'].values[0], routing.loc[routing['Node'] == 0, 'long'].values[0]]
        end_latlong = [routing.loc[routing['Node'].idxmax(), 'lat'], routing.loc[routing['Node'].idxmax(), 'long']]
        
        # Show text summary for journey
        total_cost = pd.read_csv(path+'total_cost.csv').loc[0, 'total_cost'][8:]
        distance = pd.read_csv(path+'total_disanddur.csv').loc[0, 'Distance (km)']
        duration = pd.read_csv(path+'total_disanddur.csv').loc[0, 'Duration (min)']
        st.write(f"The time now is {current_time}. A travel route has been mapped for you using Open Source Routing Machine (OSRM), where {len(interested_incidents)} incident(s) have been reported by LTA.")
        footnote = "<sup>[Generated using Mixtral-8x7B Instruct model]</sup>"
        styled_details = f"<div style='text-align: justify'>{'Details: '}{footnote}</div>"
        st.markdown(styled_details, unsafe_allow_html=True)
        st.write(f"Your travel route is {distance:.2f} km long and the estimated travel duration is {duration:.2f} minutes. {total_cost}")
        st.markdown("<br>", unsafe_allow_html=True)

        # Plotting route and interested incidents
        fig = px.scatter_mapbox(interested_incidents, lat="Latitude", lon="Longitude", hover_name="Type", opacity=.8,
                                hover_data={"Time": True, "Detail": True, "Type": False, "Size": False, "Latitude": False, "Longitude": False},
                                color='Type', size='Size', zoom=12, height=400, width=800, size_max=15,
                                color_discrete_map={"Accident":"#FF0000",
                                                    "Vehicle breakdown": "#FFFF00",
                                                    "Roadwork": "#964B00",
                                                    "Heavy Traffic": "#FFA500"})
        fig.add_trace(go.Scattermapbox(lat=interested_erp['Latitude'],lon=interested_erp['Longitude'],
                                       mode='markers', marker=dict(size=20, color='purple'),
                                       hoverinfo='text', hovertext=interested_erp['ErpGantryLocation'],name='ERP'))
        fig.add_trace(go.Scattermapbox(lat=[end_latlong[0]], lon=[end_latlong[1]],
                                mode='markers', marker=dict(size=20, color='blue'),
                                hoverinfo='text', hovertext=['End Location'], name='Destination'))
        fig.add_trace(px.line_mapbox(routing, lat="lat", lon="long", zoom=12, height=400, width=800).data[0])

        # Setting the map style to 'open-street-map'
        fig.update_layout(mapbox_style="open-street-map", margin={"r":0, "t":0, "l":0, "b":0})
        fig.update_layout(legend=dict(font=dict(size=16)))
        fig.update_traces(selector=dict(type='scattermapbox'), line=dict(width=6, color='grey'))

        # Displaying the plot
        st.plotly_chart(fig)
